)abbrev package HURWITZ HurwitzMatrix
HurwitzMatrix(V,R) : Exports == Implementation where
  R : CommutativeRing
  V : Symbol
  Exports == with
    hurwitzMatrix : UnivariatePolynomial(V, R) -> Matrix R
    singularMinor : (Matrix R, PositiveInteger, PositiveInteger) -> Matrix R
    mainMinor : (Matrix R, PositiveInteger) -> Matrix R
    hurwitzMinor : (UnivariatePolynomial(V, R), PositiveInteger) -> R

  Implementation == add

    hurwitzMatrix poly ==
      p := degree poly @ NonNegativeInteger
      m := zero(p, p)
      for row in 1..p repeat
        for col in 1..(2*row) repeat
          d := p - (col * 2 - row)
          if d >= 0 then
            m(row, col) := coefficient(poly, d :: NonNegativeInteger)
      m

    singularMinor(m, row, col) ==
      n := nrows m
      sub1 := subMatrix(m, 1, row-1, 1, col-1)
      sub2 := subMatrix(m, 1, row-1, col+1, n)
      sub3 := subMatrix(m, row+1, n, 1, col-1)
      sub4 := subMatrix(m, row+1, n, col+1, n)
      vertConcat( _
        horizConcat(sub1, sub2), _
        horizConcat(sub3, sub4) _
      )

    mainMinor(m, k) ==
      subMatrix(m, 1, k, 1, k)

    hurwitzMinor(poly, i) ==
      determinant mainMinor(hurwitzMatrix poly, i)

